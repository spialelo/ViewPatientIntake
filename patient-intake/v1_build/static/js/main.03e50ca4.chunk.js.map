{"version":3,"sources":["logo.svg","components/Button.js","components/Home.js","components/PatientInfo.js","components/EmergencyContact.js","components/ReviewPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","className","to","this","link","label","React","Component","Home","src","logo","alt","withRouter","PatientInfo","handleFormSubmit","e","preventDefault","axios","method","headers","data","state","then","result","setState","mailSent","sent","catch","error","message","patient","fname","lname","midname","email","city","zip","handleChange","bind","handleNext","Object","assign","target","value","type","checked","name","history","push","pathname","onSubmit","handleSubmit","placeholder","onChange","onClick","EmergencyContact","prevState","location","ReviewPage","currState","patientName","for","readonly","id","App","exact","path","render","component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.03e50ca4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nclass Button extends React.Component {\n    \n    constructor(props) {\n        super(props);\n    }\n    \n    \n    \n    render() {\n        return(\n            <div>\n                {/*<button to={`${this.props.link}`}>{`${this.props.label}`}</button>*/}\n                <Link className=\"btn btn-primary\" to={`${this.props.link}`}>{`${this.props.label}`}</Link>\n            </div>\n            );\n    }\n}\n\n\nButton.propTypes = {\n    label: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n};\n\nexport default Button;\n\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link, withRouter } from 'react-router-dom';\nimport Button from './Button.js';\nimport logo from '../logo.svg';\nimport '../App.css';\n\nclass Home extends React.Component {\n    render () {\n        return (\n            <div className=\"homepage\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </header>\n                <br />\n                <h1>Welcome to Patient Check-In</h1>\n                <Button label=\"Begin Check In >>\" link=\"/patient-info\" />\n                <br/>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Home);","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nclass PatientInfo extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            patient: {\n                fname: '',\n                lname: '',\n                midname: '',\n                email: '',\n                city: '',\n                state: '',\n                zip: ''\n            }\n            // additional fields will be added: DOB, physical address\n        }\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        // this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n    \n    \n    handleChange(e) {\n        const patient = Object.assign({}, this.state.patient);\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        patient[name] = value;\n        this.setState({patient});\n    }\n\n    handleNext(e) {\n        e.preventDefault();\n        const patientFile = this.state.patient;\n        // Change input submit to Link and style like button\n        // Pass this component's state onto the next component/fields for user to fill in\n        this.props.history.push({ \n            pathname: '/review-page',\n            state: this.state\n        });\n    }\n    \n    \n    // Keep this to replace or use some of axios code later; delete later?\n    handleFormSubmit = e => {\n      e.preventDefault();\n      axios({\n        method: 'post',\n        // url: {process.env.REACT_APP_API_PATH},\n        headers: { 'content-type': 'application/json' },\n        data: this.state\n      })\n        .then(result => {\n          this.setState({\n            mailSent: result.data.sent\n          })\n        })\n        .catch(error => this.setState({ error: error.message }));\n    };\n    \n    \n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n            <div>\n                <h1>Patient Information</h1>\n                <div className=\"form-row\">\n                    <div className=\"col-md-4 mb-3\">\n                        <label className=\"col-form-label\">\n                          First Name:\n                          </label>\n                          <input type=\"text\" className=\"form-control\" name=\"fname\" placeholder=\"First Name\" value={this.state.fname} onChange={this.handleChange} />\n                    </div>\n\n                    <div className=\"col-md-4 mb-3\">\n                        <label className=\"col-form-label\">\n                          Middle Name/Initial (optional):\n                          </label>\n                          <input type=\"text\" className=\"form-control\" name=\"midname\" placeholder=\"Middle Name\" value={this.state.midname} onChange={this.handleChange} />\n                    </div>\n                    \n                    <div className=\"col-md-4 mb-3\">\n                        <label className=\"col-form-label\">\n                          Last Name:\n                          </label>\n                          <input type=\"text\" className=\"form-control\" name=\"lname\" placeholder=\"Last Name\" value={this.state.lname} onChange={this.handleChange} />\n                    </div>\n                </div>\n                \n                <div className=\"form-row\">\n                    <div className=\"col-md-6 mb-3\">\n                      <label>City</label>\n                      <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\" value={this.state.city} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"col-md-3 mb-3\">\n                      <label>State</label>\n                      <input type=\"text\" className=\"form-control\" name=\"state\" placeholder=\"State\" value={this.state.state} onChange={this.handleChange} />\n                    </div>\n                    <div className=\"col-md-3 mb-3\">\n                      <label>Zip</label>\n                      <input type=\"text\" className=\"form-control\" name=\"zip\" placeholder=\"Zip\" value={this.state.zip} onChange={this.handleChange} />\n                    </div>\n                  </div>\n                \n                <div className=\"form-row\">\n                    <div className=\"col-md-4 mb-3\">\n                        <label className=\"col-form-label\">\n                          Email Address:\n                         </label>\n                         <input type=\"text\" className=\"form-control\" name=\"email\" placeholder=\"me@example.com\" value={this.state.email} onChange={this.handleChange} />\n                     </div>\n                </div>\n                    <br/>\n                    <br/>\n\n                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Next >>\" onClick={e => this.handleNext(e)} />\n\n                </div>\n            </form>\n            );\n    }\n}\n\n\nPatientInfo.propTypes = {\n    label: PropTypes.string.isRequired,\n    link: PropTypes.string.isRequired,\n};\n\nexport default withRouter(PatientInfo);\n\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\n\nclass EmergencyContact extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {}\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleNext = this.handleNext.bind(this);\n        \n    }\n    \n    componentDidMount() {\n        // console.log(this.props);\n        const prevState = this.props ? this.props.location.state : Object.assign({});\n        this.setState({patient: Object.assign({}, prevState.patient)});\n    }\n    \n    handleChange(e) {\n        const patient = Object.assign({}, this.state.patient);\n        const target = e.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        patient[name] = value;\n        this.setState({patient});\n    }\n\n    handleNext(e) {\n        e.preventDefault();\n        const patientFile = this.state.patient;\n        // Change input submit to Link and style like button\n        // Pass this component's state onto the next component/fields for user to fill in\n        this.props.history.push({ \n            pathname: '/review-page',\n            state: this.state\n        });\n    }\n    \n    \n    render () {\n        return (\n            <div>Blah\n            <br/>\n            <br/>\n            Now for Emergency Contact information\n            </div>\n            );\n    }\n    \n    \n}\n\n\nexport default withRouter(EmergencyContact);","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\n\nclass ReviewPage extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            patient: ''\n        }\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n        \n    }\n    \n    componentDidMount() {\n        // console.log(this.props);\n        const prevState = this.props ? this.props.location.state : Object.assign({});\n        this.setState({patient: Object.assign({}, prevState.patient)});\n    }\n    \n    handleSubmit(e) {\n        e.preventDefault();\n        const patientFile = this.state.patient;\n        // Change input submit to Link and style like button\n        // Pass this component's state onto the next component/fields for user to fill in\n        this.props.history.push({ \n            pathname: '/emergency-contact',\n            state: this.state\n        });\n        \n        \n        // Organize compiled data in a data structure that our API is looking for\n        \n        // successful status completion; if checkInComplete, navigate to \"Check-in Complete\" page\n        // update state with checkInComplete: true / false\n\n    }\n    \n    \n    render () {\n        let currState = this.state.patient\n        let patientName = currState.fname + ' ' + currState.lname;\n        return (\n            \n            <form>\n            <h4>Final Review Page of Patient Information</h4>\n              <div className=\"form-group row\">\n                <label for=\"staticEmail\" className=\"col-sm-2 col-form-label\">Patient's Name: </label>\n                { currState.fname && \n                <div className=\"col-sm-10\">\n                  <input type=\"text\" readonly className=\"form-control-plaintext\" id=\"staticEmail\" value={patientName} />\n                </div> }\n              </div>\n              <div className=\"form-group row\">\n                <label for=\"staticEmail\" className=\"col-sm-2 col-form-label\">Email: </label>\n                {currState.email && \n                <div className=\"col-sm-10\">\n                  <input type=\"text\" readonly className=\"form-control-plaintext\" id=\"staticEmail\" value={currState.email} />\n                </div>\n                }\n              </div>\n              <br/>\n              <div className=\"col-sm-10\">\n                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Submit\" onClick={e => this.handleSubmit(e)} />\n                </div>\n            </form>\n            );\n    }\n    \n    \n}\n\n\nexport default withRouter(ReviewPage);","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport Home from './components/Home.js'\nimport PatientInfo from './components/PatientInfo.js'\nimport EmergencyContact from './components/EmergencyContact.js'\nimport ReviewPage from './components/ReviewPage.js'\nimport logo from './logo.svg';\nimport './App.css';\n\nconst API_PATH = \"https://web.njit.edu/~as2757/ControlPatientIntake/api.php\";\n\nexport default function App() {\n  return (\n  <div className=\"App\">\n        {/*<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>*/}\n  <Switch>\n  <Route\n      exact\n      path=\"/dashboard\"\n      render={() => (\n        <div>\n          <h1>Dashboard</h1>\n          <Link to=\"/\" id=\"click-me\">\n            Home\n          </Link>\n        </div>\n      )}\n    />\n    <Route\n      exact\n      path=\"/patient-info\"\n      component={withRouter(PatientInfo)}\n    />\n    <Route\n      exact\n      path=\"/emergency-contact\"\n      component={withRouter(EmergencyContact)}\n    />\n    <Route\n      exact\n      path=\"/review-page\"\n      component={withRouter(ReviewPage)}\n    />\n    <Route\n      exact\n      path=\"/\"\n      component={Home}\n    />\n    </Switch>\n\n  </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}